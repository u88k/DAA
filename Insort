
#include <iostream>
using namespace std;

int comp=0;

void InsertionSort(int* Arr,int len){
	comp=0;
	int key;
	for(int i=1;i<len;i++){
		key=Arr[i];
		int j=i-1;
		while(j>=0 && key<Arr[j]){
			Arr[i]=Arr[j];
			comp++;
			j--;
		}
		Arr[j+1]=key;
	}
}
//--------------------------------------------------mergesort--------------------------------------------


void Merge(int A[], int p,int q,int r){
	int nl = q-p+1;
	int nr = r-q;
	
	//creating new temporary arrays
	int left[nl];
	int right[nr];
	
	
	for(int i = 0; i<nl; i++){
		left[i] = A[p+i];
	}
	
	
	for(int i = 0; i<nr; i++){
		right[i] = A[q+1+i];
	}
	
	int i = 0;
	int j = 0;
	int k = 0;
	
	while(i<nl && j<nr){
		comp++;
		if(left[i] <= right[j]){
			A[p+k] = left[i];
			i++;
		}else{
			A[p+k] = right[j];
			j++;
		}
		k++;
	}
	
	while(i<nl){
		A[p+k] = left[i];
		i++;
		k++;
	}
	
	while(j<nr){
		A[p+k] = right[j];
		j++;
		k++;
	}
}

void MergeSort(int A[],int p, int r){
	if(p<r){
		int q = (p+r)/2;
		MergeSort(A,p,q);
		MergeSort(A,q+1,r);
		Merge(A,p,q,r);
	}
}


//------------------------------------------------------heapsort----------------------------------------------------------------------------------------
void Heapify(int A[],int size,int i){
	int largest = i;
	int l = 2*i + 1;
	int r = 2*i + 2;
	
	if(l<size && A[l] > A[largest]){
		comp++;
		largest = l;
	}
	
	if(r<size && A[r] > A[largest]){
		comp++;
		largest = r;
	}
	
	if(largest!=i){
		comp++;
		swap(A[i],A[largest]);
		Heapify(A,size,largest);
	}
}

void BuildHeap(int A[],int size){
	for(int i=size/2 - 1; i>=0; i--){
		Heapify(A,size,i);
	}
}

void HeapSort(int A[], int size){
	BuildHeap(A,size);

	for(int i=size-1; i>0; i--){
		swap(A[0],A[i]);
		Heapify(A,i,0);
	}
}


//----------------------------------------------quicksort------------------------------------------------------------

int partition(int A[],int p,int r){
	int temp = A[r];
	int i = p-1;
	for(int j = p; j<r; j++){
		comp++;
		if(A[j] < temp){
			i++;
			swap(A[i],A[j]);
		}
	}
	i++;
	swap(A[i],A[r]);
	return i;
}

void QuickSort(int A[], int p,int r){
	if(p<r){
		int q = partition(A,p,r);
		QuickSort(A,p,q-1);
		QuickSort(A,q+1,r);
	}
}



int main(){
	int* Arr;
	int n;
	int ch;
	int* AvgCmp;
	int Cmp[10];
	int sum;
	cout<<"Choose the sorting algorithm you want to use:\n1)Insertion sort\n2)Merge sort\n3)Heap Sort\n4)Quick sort\n5)Count sort"<<endl;
	cout<<"Enter your choice : ";
	cin>>ch;
	
	if(ch<=0 || ch>5){
				cout<<"Enter A valid sorting algorithm.\n\n"<<endl;
				main();
	}else{
		cout<<"\nEnter Numbers of different Sizes: ";
		cin>>n;
		AvgCmp=new int[n];
		int RandSize;
		for(int i=0;i<n;i++){
			sum=0;
			RandSize= (rand() % (1000 - 30 + 1)) + 30;
			Arr= new int[RandSize];
			
			for(int j=0;j<10;j++){
				for(int k=0;k<RandSize;k++){
					Arr[k]=(rand() % (100)) + 1;
				}
				if(ch==1){
					InsertionSort(Arr,RandSize);
				}else if(ch==2){
					MergeSort(Arr,0,RandSize-1);
				}else if(ch==3){
					HeapSort(Arr,RandSize);
				}else if(ch==4){
					QuickSort(Arr,0,RandSize-1);
				}else if(ch==5){
					continue;
				}
				
				Cmp[j]=comp;
			}
			
			for(int l=0;l<10;l++){
				sum+=Cmp[l];
			}
			
			AvgCmp[i]=sum/10;
			
			cout<<"\nAverage number of comparisions in array of size "<<RandSize<<" is "<<AvgCmp[i];	
		}
	}
	
	
	return 0;
}
