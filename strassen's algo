#include <iostream>
#include <vector>

using namespace std;

void add(vector<vector<int>>& A, vector<vector<int>>& B, vector<vector<int>>& C, int size)
for (int i = 0; i < size; i++)
for (int j = 0; j < size; j++)
C[i][j] = A[i][j] + B[i][j];
}

void subtract(vector<vector<int>>& A, vector<vector<int>>& B, vector<vector<int>>& C, int for (int i = 0; i < size; i++)
for (int j = 0; j < size; j++)
C[i][j] = A[i][j] - B[i][j];
}

void strassen(vector<vector<int>>& A, vector<vector<int>>& B, vector<vector<int>>& C, int if (size == 1) {

C[0][0] = A[0][0] * B[0][0];
return;
}

int newSize = size / 2;
vector<vector<int>> A11(newSize, vector<int>(newSize)); vector<vector<int>> A12(newSize, vector<int>(newSize)); vector<vector<int>> A21(newSize, vector<int>(newSize)); vector<vector<int>> A22(newSize, vector<int>(newSize));

vector<vector<int>>	B11(newSize,	vector<int>(newSize));
vector<vector<int>>	B12(newSize,	vector<int>(newSize));
vector<vector<int>>	B21(newSize,	vector<int>(newSize));
vector<vector<int>>	B22(newSize,	vector<int>(newSize));
vector<vector<int>>	C11(newSize,	vector<int>(newSize));
vector<vector<int>>	C12(newSize,	vector<int>(newSize));
vector<vector<int>>	C21(newSize,	vector<int>(newSize));
vector<vector<int>>	C22(newSize,	vector<int>(newSize));
vector<vector<int>>	M1(newSize, vector<int>(newSize));
vector<vector<int>>	M2(newSize, vector<int>(newSize));
vector<vector<int>>	M3(newSize, vector<int>(newSize));
vector<vector<int>>	M4(newSize, vector<int>(newSize));
vector<vector<int>>	M5(newSize, vector<int>(newSize));
vector<vector<int>>	M6(newSize, vector<int>(newSize));
vector<vector<int>>	M7(newSize, vector<int>(newSize));
vector<vector<int>>	AResult(newSize, vector<int>(newSize));
vector<vector<int>>	BResult(newSize, vector<int>(newSize));
for (int i = 0; i <	newSize; i++) {
for (int j = 0;	j < newSize;	j++) {
A11[i][j] =	A[i][j];	
A12[i][j] =	A[i][j + newSize];
A21[i][j] =	A[i + newSize][j];
A22[i][j] =	A[i + newSize][j + newSize];
B11[i][j] =	B[i][j];	
 
B12[i][j] = B[i][j + newSize];
B21[i][j] = B[i + newSize][j];
B22[i][j] = B[i + newSize][j + newSize];
}
}

add(A11, A22, AResult, newSize); add(B11, B22, BResult, newSize); strassen(AResult, BResult, M1, newSize);

add(A21, A22, AResult, newSize);
strassen(AResult, B11, M2, newSize);

subtract(B12, B22, BResult, newSize);
strassen(A11, BResult, M3, newSize);

subtract(B21, B11, BResult, newSize);
strassen(A22, BResult, M4, newSize);

add(A11, A12, AResult, newSize);
strassen(AResult, B22, M5, newSize);

subtract(A21, A11, AResult, newSize); add(B11, B12, BResult, newSize); strassen(AResult, BResult, M6, newSize);

subtract(A12, A22, AResult, newSize); add(B21, B22, BResult, newSize); strassen(AResult, BResult, M7, newSize);

add(M1, M4, AResult, newSize); subtract(AResult, M5, BResult, newSize); add(BResult, M7, C11, newSize);

add(M3, M5, C12, newSize);

add(M2, M4, C21, newSize);

add(M1, M3, AResult, newSize); subtract(AResult, M2, BResult, newSize); add(BResult, M6, C22, newSize);

for (int i = 0; i < newSize; i++) {
for (int j = 0; j < newSize; j++) {
C[i][j] = C11[i][j];
C[i][j + newSize] = C12[i][j];
C[i + newSize][j] = C21[i][j];
C[i + newSize][j + newSize] = C22[i][j];
}
}
}

int main() {
int n = 4; // assuming n is a power of 2 vector<vector<int>> A = {
{1, 2, 3, 4},
{5, 6, 7, 8},
 
{9, 10, 11, 12},
{13, 14, 15, 16}
};

vector<vector<int>> B = {
{1, 2, 3, 4},
{5, 6, 7, 8},
{9, 10, 11, 12},
{13, 14, 15, 16}
};

vector<vector<int>> C(n, vector<int>(n, 0));

strassen(A, B, C, n);

cout << "Result matrix: " << endl;
for (int i = 0; i < n; i++) {
for (int j = 0; j < n; j++) {
cout << C[i][j] << " ";
}
cout << endl;
}

return 0;
}
